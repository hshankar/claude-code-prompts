{
  "env": {
    "DISABLE_BUG_COMMAND": "1",
    "DISABLE_ERROR_REPORTING": "1",
    "DISABLE_NON_ESSENTIAL_MODEL_CALLS": "1",
    "DISABLE_TELEMETRY": "1"
  },
  "includeCoAuthoredBy": false,
  "permissions": {
    "allow": [
      "Bash(basename:*)",
      "Bash(cat:*)",
      "Bash(chmod:*)",
      "Bash(cp:*)",
      "Bash(diff:*)",
      "Bash(echo $?)",
      "Bash(find:*)",
      "Bash(gh api:*)",
      "Bash(gh issue:*)",
      "Bash(gh pr checks:*)",
      "Bash(gh pr view:*)",
      "Bash(gh repo view:*)",
      "Bash(git add:*)",
      "Bash(git check-ignore:*)",
      "Bash(git checkout:*)",
      "Bash(git diff:*)",
      "Bash(git log:*)",
      "Bash(git ls-tree:*)",
      "Bash(git merge-base:*)",
      "Bash(git mv:*)",
      "Bash(git rebase:*)",
      "Bash(git reset:*)",
      "Bash(git restore:*)",
      "Bash(git rev-parse:*)",
      "Bash(git stash push:*)",
      "Bash(git stash:*)",
      "Bash(git worktree add:*)",
      "Bash(grep:*)",
      "Bash(just --list)",
      "Bash(just build)",
      "Bash(just checkstyle)",
      "Bash(just checkstyle-semantics)",
      "Bash(just format)",
      "Bash(just install)",
      "Bash(just lint)",
      "Bash(just precommit)",
      "Bash(just spotless:*)",
      "Bash(just test)",
      "Bash(just typecheck)",
      "Bash(ls:*)",
      "Bash(mise install:*)",
      "Bash(mise ls-remote:*)",
      "Bash(mise ls:*)",
      "Bash(mise tasks:*)",
      "Bash(mkdir:*)",
      "Bash(mktemp:*)",
      "Bash(mv:*)",
      "Bash(mvn checkstyle:check:*)",
      "Bash(mvn dependency:get:*)",
      "Bash(mvn dependency:tree:*)",
      "Bash(mvn test:*)",
      "Bash(node --version)",
      "Bash(npm --version)",
      "Bash(npm info:*)",
      "Bash(npm install:*)",
      "Bash(npm ls:*)",
      "Bash(npm remove:*)",
      "Bash(npm run build)",
      "Bash(npm run build:*)",
      "Bash(npm run ci:eslint:*)",
      "Bash(npm run ci:format:*)",
      "Bash(npm run ci:lint)",
      "Bash(npm run ci:typecheck:*)",
      "Bash(npm run eslint:*)",
      "Bash(npm run format:*)",
      "Bash(npm run generate:routes:*)",
      "Bash(npm run lint)",
      "Bash(npm run lint:*)",
      "Bash(npm run precommit:*)",
      "Bash(npm run route:generate)",
      "Bash(npm run test)",
      "Bash(npm run test:*)",
      "Bash(npm run test:run:*)",
      "Bash(npm run tsc:*)",
      "Bash(npm run type-check:*)",
      "Bash(npm run typecheck)",
      "Bash(npm run typecheck:*)",
      "Bash(npm run)",
      "Bash(npm test)",
      "Bash(npm test:*)",
      "Bash(npm uninstall:*)",
      "Bash(npm update:*)",
      "Bash(npm view:*)",
      "Bash(npx @tanstack/router-cli:*)",
      "Bash(npx biome:*)",
      "Bash(npx eslint:*)",
      "Bash(npx tsc:*)",
      "Bash(npx tsr:*)",
      "Bash(npx tsx:*)",
      "Bash(npx vite build:*)",
      "Bash(npx vite-node:*)",
      "Bash(rg:*)",
      "Bash(sed:*)",
      "Bash(sentry-cli issues:*)",
      "Bash(task help)",
      "Bash(test:*)",
      "Bash(touch:*)",
      "Bash(tree:*)",
      "Bash(true)",
      "Bash(tsc --noEmit)",
      "Bash(uv tool run pre-commit run:*)",
      "Bash(yarn test:*)",
      "Read(~/.zshrc)",
      "WebFetch(domain:developer.1password.com)",
      "WebFetch(domain:developers.cloudflare.com)",
      "WebFetch(domain:docs.github.com)",
      "WebFetch(domain:docs.openrewrite.org)",
      "WebFetch(domain:docs.sentry.io)",
      "WebFetch(domain:docusaurus.io)",
      "WebFetch(domain:github.com)",
      "WebFetch(domain:raw.githubusercontent.com)",
      "WebFetch(domain:repo1.maven.org)",
      "WebFetch(domain:tanstack.com)",
      "WebFetch(domain:taskwarrior.org)",
      "WebFetch(domain:vite.dev)",
      "WebFetchTool(domain:raw.githubusercontent.com)",
      "WebFetchTool(domain:www.anthropic.com)"
    ]
    "deny": [
      "Bash(npm run dev:*)",
      "Bash(npm run serve:*)",
      "Bash(npm run start:*)",
      "Bash(npm run start &)",
      "Bash(git add -f:*)",
      "Bash(git add --force:*)",
      "Bash(git push:*)",
      "Bash(git worktree remove --force:*)",
      "Bash(rm -rf: *)",
      "Bash(op: *)"
    ]
  },
  "enabledMcpjsonServers": [
  ],
  "hooks": {
    "Stop": [
      {
        "matcher": "",
        "hooks": [
          {
            "type": "command",
            "command": "if [ \"$NOTIFICATIONS\" = \"true\" ]; then woof \"Claude: $(basename $(pwd))\"; else echo \"NOTIFICATIONS=$NOTIFICATIONS (not woofing)\"; fi"
          }
        ]
      }
    ]
  }
}
